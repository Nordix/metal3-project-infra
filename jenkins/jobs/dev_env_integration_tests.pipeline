import java.text.SimpleDateFormat

ci_git_credential_id = "metal3-jenkins-github-token"

// 10 minutes
def CLEAN_TIMEOUT = 600
// 2 hours
def TIMEOUT = 7200

script {
  if ("${env.REPO_OWNER}" == "metal3-io" && "${env.REPO_NAME}" == "project-infra") {
    echo "Checkout https://github.com/${env.REPO_OWNER}/${env.REPO_NAME}.git branch ${env.PULL_PULL_SHA}"
    ci_git_branch = (env.PULL_PULL_SHA) ?: "main"
    ci_git_url = "https://github.com/${env.REPO_OWNER}/${env.REPO_NAME}.git"
    ci_git_base = (env.PULL_BASE_REF) ?: "main"
    // Fetch the base branch and the ci_git_branch when running on project-infra PR
    refspec = '+refs/heads/' + ci_git_base + ':refs/remotes/origin/' + ci_git_base + ' ' + ci_git_branch
  } else {
    ci_git_branch = "main"
    ci_git_url = "https://github.com/metal3-io/project-infra.git"
    refspec = '+refs/heads/*:refs/remotes/origin/*'
  }
  agent_label="metal3ci-medium-${IMAGE_OS}"
}

pipeline {
  agent { label agent_label }
  environment {
    METAL3_CI_USER="metal3ci"
    REPO_ORG = "${env.REPO_OWNER}"
    REPO_NAME = "${env.REPO_NAME}"
    REPO_BRANCH = "${env.PULL_BASE_REF}"
    BUILD_TAG = "${env.BUILD_TAG}"
    PR_ID = "${env.PULL_NUMBER}"
    IMAGE_OS = "${IMAGE_OS}"
    CAPI_VERSION = "${CAPI_VERSION}"
    CAPM3_VERSION = "${CAPM3_VERSION}"
    CAPM3RELEASEBRANCH = "${capm3_release_branch}"
    BMORELEASEBRANCH = "${bmo_release_branch}"
    TARGET_NODE_MEMORY = "${TARGET_NODE_MEMORY}"
    NUM_NODES=2
    IRONIC_INSTALL_TYPE="${params.IRONIC_INSTALL_TYPE}"
    IRONIC_USE_MARIADB="${params.IRONIC_USE_MARIADB}"
    BUILD_MARIADB_IMAGE_LOCALLY="${params.BUILD_MARIADB_IMAGE_LOCALLY}"
  }

  stages {
    stage('Run integration test') {
      options {
        timeout(time: TIMEOUT, unit: 'SECONDS')
      }
      environment {
        BUILD_TAG = "${env.BUILD_TAG}-integration"
      }
      steps {
        script {
          CURRENT_START_TIME = System.currentTimeMillis()
        }
        /* Checkout CI Repo */
        checkout([$class: 'GitSCM',
        branches: [
          [name: ci_git_branch]
        ],
        doGenerateSubmoduleConfigurations: false,
        extensions: [
          [$class: 'WipeWorkspace'],
          [$class: 'CleanCheckout'],
          [$class: 'CleanBeforeCheckout']
        ],
        submoduleCfg: [],
        userRemoteConfigs: [
          [credentialsId: ci_git_credential_id,
          url: ci_git_url,
          refspec: refspec
          ]
        ]
        ])

       withCredentials([string(credentialsId: 'metal3-clusterctl-github-token', variable: 'GITHUB_TOKEN')]) {
          ansiColor('xterm') {
            timestamps {
              sh "./jenkins/scripts/dynamic_worker_workflow/dev_env_integration_tests.sh"
            }
          }
        }
      }
      post {
        always {
          script {
            CURRENT_END_TIME = System.currentTimeMillis()
            if ((((CURRENT_END_TIME - CURRENT_START_TIME)/1000) - TIMEOUT) > 0) {
              echo "Failed due to timeout"
              currentBuild.result = 'FAILURE'
            }
            timestamps {
              sh "./jenkins/scripts/dynamic_worker_workflow/fetch_logs.sh"
              archiveArtifacts "logs-${env.BUILD_TAG}.tgz"
            }
          }
        }
        cleanup {
          script {
            timestamps {
              sh "./jenkins/scripts/dynamic_worker_workflow/run_clean.sh"
            }
          }
        }
      }
    }
  }
}
