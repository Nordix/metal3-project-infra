
ci_git_credential_id = 'metal3-jenkins-github-token'

// 3 hours
int TIMEOUT = 10800

script {
    PROJECT_REPO_ORG = (env.REPO_OWNER) ?: (env.PROJECT_REPO_ORG)
    PROJECT_REPO_NAME = (env.REPO_NAME) ?: (env.PROJECT_REPO_NAME)
    UPDATED_REPO = "https://github.com/${PROJECT_REPO_ORG}/${PROJECT_REPO_NAME}.git"
    echo "Test triggered from ${UPDATED_REPO}"

    if ("${PROJECT_REPO_ORG}" == 'metal3-io' && "${PROJECT_REPO_NAME}" == 'project-infra') {
        ci_git_branch = (env.PULL_PULL_SHA) ?: (env.ghprbActualCommit) ?: "main"
        ci_git_url = (env.ghprbAuthorRepoGitUrl) ?: "https://github.com/metal3-io/project-infra.git"
    } else {
        ci_git_branch = 'main'
        ci_git_url = 'https://github.com/metal3-io/project-infra.git'
    }
    echo "Checkout ${ci_git_url} branch ${ci_git_branch}"
    agent_label = "metal3ci-large-${IMAGE_OS}"
    UPDATED_BRANCH = (env.PULL_PULL_SHA) ?: (env.ghprbActualCommit)
    REPO_BRANCH = (env.PULL_BASE_REF) ?: (env.ghprbTargetBranch)
    if (!env.REPO_OWNER) {
        UPDATED_REPO = "${ghprbAuthorRepoGitUrl}"
    }
}

pipeline {
    agent none
    environment {
        METAL3_CI_USER = 'metal3ci'
        REPO_ORG = "${PROJECT_REPO_ORG}"
        REPO_NAME = "${PROJECT_REPO_NAME}"
        UPDATED_REPO = "${UPDATED_REPO}"
        REPO_BRANCH = "${REPO_BRANCH}"
        UPDATED_BRANCH = "${UPDATED_BRANCH}"
        BUILD_TAG = "${env.BUILD_TAG}"
        IMAGE_OS = "${IMAGE_OS}"
        CAPM3RELEASEBRANCH = "${capm3_release_branch}"
        BMORELEASEBRANCH = "${bmo_release_branch}"
        TARGET_NODE_MEMORY = "${TARGET_NODE_MEMORY}"
        TESTS_FOR = "${TESTS_FOR}"
        GINKGO_FOCUS = "${GINKGO_FOCUS}"
        GINKGO_SKIP = "${GINKGO_SKIP}"
    }

    stages {
        stage('Clusterctl upgrade test') {
            agent { label agent_label }
            options {
                timeout(time: TIMEOUT, unit: 'SECONDS')
            }
            steps {
                script {
                    CURRENT_START_TIME = System.currentTimeMillis()
                }
                /* Checkout CI Repo */
                checkout([
                  $class: 'GitSCM',
                  branches: [
                    [name: ci_git_branch]
                    ],
                  doGenerateSubmoduleConfigurations: false,
                  extensions: [
                      [$class: 'WipeWorkspace'],
                      [$class: 'CleanCheckout'],
                      [$class: 'CleanBeforeCheckout']
                      ],
                  submoduleCfg: [],
                  userRemoteConfigs: [
                      [credentialsId: ci_git_credential_id,url: ci_git_url]
                      ]
                  ])
                withCredentials([string(credentialsId: 'metal3-clusterctl-github-token', variable: 'GITHUB_TOKEN')]) {
                    ansiColor('xterm') {
                        timestamps {
                            sh './jenkins/scripts/dynamic_worker_workflow/feature_tests.sh'
                        }
                    }
                }
            }
            post {
                always {
                    script {
                        CURRENT_END_TIME = System.currentTimeMillis()
                        if ((((CURRENT_END_TIME - CURRENT_START_TIME) / 1000) - TIMEOUT) > 0) {
                            echo 'Failed due to timeout'
                            currentBuild.result = 'FAILURE'
                        }
                        timestamps {
                            sh './jenkins/scripts/dynamic_worker_workflow/fetch_logs.sh'
                            archiveArtifacts "logs-${env.BUILD_TAG}.tgz"
                        }
                    }
                }
                cleanup {
                    script {
                        timestamps {
                            sh './jenkins/scripts/dynamic_worker_workflow/run_clean.sh'
                        }
                    }
                }
            }
        }
    }
}
