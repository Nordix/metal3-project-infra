import java.text.SimpleDateFormat

ci_git_credential_id = "metal3-jenkins-github-token"

// 10 minutes
def CLEAN_TIMEOUT = 600
// 2 hours
def TIMEOUT = 7200
KEEP_TEST_ENV=(env.KEEP_TEST_ENV)
KUBECTL_SHA256=(env.KUBECTL_SHA256)

script {
  UPDATED_REPO = "https://github.com/${env.REPO_OWNER}/${env.REPO_NAME}.git"
  echo "Test triggered from ${UPDATED_REPO}" 
  ci_git_url = "https://github.com/metal3-io/project-infra.git"

  if ("${env.REPO_OWNER}" == "metal3-io" && "${env.REPO_NAME}" == "project-infra") {
    ci_git_branch = (env.PULL_PULL_SHA) ?: "main"
    ci_git_base = (env.PULL_BASE_REF) ?: "main"
    // Fetch the base branch and the ci_git_branch when running on project-infra PR
    refspec = '+refs/heads/' + ci_git_base + ':refs/remotes/origin/' + ci_git_base + ' ' + ci_git_branch
  } else {
    ci_git_branch = "main"
  }
  echo "Checkout ${ci_git_url} branch ${ci_git_branch}"

  def date = new Date()
  def dateFormat = new SimpleDateFormat("yyyyMMddHHmmss")
  def rand = new Random()
  VM_KEY = (1..4).collect { ('a'..'z').join("")[ rand.nextInt( 26 ) ] }.join("")

  if ("${KEEP_TEST_ENV}" == "true") {
    VM_NAME = "ci-test-keep-vm-" + dateFormat.format(date) + "-" + VM_KEY
  } else {
    VM_NAME = "ci-test-vm-" + dateFormat.format(date) + "-" + VM_KEY
  }
}

pipeline {
  agent { label 'metal3-static-workers' }
  environment {
    METAL3_CI_USER="metal3ci"
    // Defined in the job project 
    REPO_ORG = "${env.REPO_OWNER}"
    REPO_NAME = "${env.REPO_NAME}"
    // Defined in prow env vars 
    // https://docs.prow.k8s.io/docs/jobs/#job-environment-variables
    REPO_BRANCH = "${env.PULL_BASE_REF}"
    UPDATED_BRANCH = "${env.PULL_PULL_SHA}"
    BUILD_TAG = "${env.BUILD_TAG}"
    PR_ID = "${env.PULL_NUMBER}"
    UPDATED_REPO = "${UPDATED_REPO}"
    OS_USERNAME="metal3ci"
    OS_AUTH_URL="https://kna1.citycloud.com:5000"
    OS_USER_DOMAIN_NAME="CCP_Domain_37137"
    OS_PROJECT_DOMAIN_NAME="CCP_Domain_37137"
    OS_REGION_NAME="Kna1"
    OS_PROJECT_NAME="Default Project 37137"
    OS_TENANT_NAME="Default Project 37137"
    OS_AUTH_VERSION=3
    OS_IDENTITY_API_VERSION=3
    TEST_EXECUTER_VM_NAME = "${VM_NAME}"
    IMAGE_OS = "${IMAGE_OS}"
    CAPI_VERSION = "${CAPI_VERSION}"
    CAPIRELEASE = "${CAPIRELEASE}"
    CAPM3_VERSION = "${CAPM3_VERSION}"
    CAPM3RELEASEBRANCH = "${capm3_release_branch}"
    CAPM3RELEASE = "${CAPM3RELEASE}"
    BMORELEASEBRANCH = "${bmo_release_branch}"
    TARGET_NODE_MEMORY = "${TARGET_NODE_MEMORY}"
    NUM_NODES="${NUM_NODES}"
    TESTS_FOR="${TESTS_FOR}"
    KEEP_TEST_ENV="${KEEP_TEST_ENV}"
    GINKGO_FOCUS="${GINKGO_FOCUS}"
    GINKGO_SKIP="${GINKGO_SKIP}"
    EPHEMERAL_TEST="${EPHEMERAL_TEST}"
    IRONIC_INSTALL_TYPE="${params.IRONIC_INSTALL_TYPE}"
    IRONIC_USE_MARIADB="${params.IRONIC_USE_MARIADB}"
    BUILD_MARIADB_IMAGE_LOCALLY="${params.BUILD_MARIADB_IMAGE_LOCALLY}"
    UPGRADE_FROM_RELEASE="${UPGRADE_FROM_RELEASE}"
    KUBERNETES_VERSION_UPGRADE_FROM="${KUBERNETES_VERSION_UPGRADE_FROM}"
    KUBERNETES_VERSION_UPGRADE_TO="${KUBERNETES_VERSION_UPGRADE_TO}"
    KUBECTL_SHA256="${KUBECTL_SHA256}"
  }
  stages {
    stage('SCM') {
      options {
        timeout(time: 5, unit: 'MINUTES')
      }
      steps {
        /* Checkout CI Repo */
        checkout([$class: 'GitSCM',
                 branches: [[name: ci_git_branch]],
                 doGenerateSubmoduleConfigurations: false,
                 extensions: [[$class: 'WipeWorkspace'],
                 [$class: 'CleanCheckout'],
                 [$class: 'CleanBeforeCheckout']],
                 submoduleCfg: [],
                 userRemoteConfigs: [[credentialsId: ci_git_credential_id,
                 url: ci_git_url, refspec: refspec]]])
        script {
          CURRENT_START_TIME = System.currentTimeMillis()
        }
      }
    }
    stage('Run integration test') {
      options {
        timeout(time: TIMEOUT, unit: 'SECONDS')
      }
      steps {
        withCredentials([usernamePassword(credentialsId: 'metal3ci_city_cloud_openstack_credentials', usernameVariable: 'OS_USERNAME', passwordVariable: 'OS_PASSWORD')]) {
          withCredentials([sshUserPrivateKey(credentialsId: 'metal3ci_city_cloud_ssh_keypair', keyFileVariable: 'METAL3_CI_USER_KEY')]) {
            withCredentials([string(credentialsId: 'metal3-clusterctl-github-token', variable: 'GITHUB_TOKEN')]) {
              ansiColor('xterm') {
                timestamps {
                  sh "./jenkins/scripts/integration_test.sh"
                }
              }
            }
          }
        }
      }
      post {
        always {
          script {
            CURRENT_END_TIME = System.currentTimeMillis()
            if ((((CURRENT_END_TIME - CURRENT_START_TIME)/1000) - TIMEOUT) > 0) {
              echo "Failed due to timeout"
              currentBuild.result = 'FAILURE'
            }
          }
          withCredentials([usernamePassword(credentialsId: 'metal3ci_city_cloud_openstack_credentials', usernameVariable: 'OS_USERNAME', passwordVariable: 'OS_PASSWORD')]) {
            withCredentials([sshUserPrivateKey(credentialsId: 'metal3ci_city_cloud_ssh_keypair', keyFileVariable: 'METAL3_CI_USER_KEY')]){
              timestamps {
                sh "./jenkins/scripts/fetch_logs.sh"
              }
            }
          }
          archiveArtifacts "logs-${env.BUILD_TAG}.tgz"
        }
      }
    }
  }
  post {
    success {
      withCredentials([usernamePassword(credentialsId: 'metal3ci_city_cloud_openstack_credentials', usernameVariable: 'OS_USERNAME', passwordVariable: 'OS_PASSWORD')]) {
        withCredentials([sshUserPrivateKey(credentialsId: 'metal3ci_city_cloud_ssh_keypair', keyFileVariable: 'METAL3_CI_USER_KEY')]){
          script {
            if ("${KEEP_TEST_ENV}" == "true") {
              echo "Skipping environment clean up"
            } else {
              timestamps {
                sh "./jenkins/scripts/integration_test_clean.sh"
              }
            }
          }
        }
      }
    }
    cleanup {
      withCredentials([usernamePassword(credentialsId: 'metal3ci_city_cloud_openstack_credentials', usernameVariable: 'OS_USERNAME', passwordVariable: 'OS_PASSWORD')]) {
        withCredentials([sshUserPrivateKey(credentialsId: 'metal3ci_city_cloud_ssh_keypair', keyFileVariable: 'METAL3_CI_USER_KEY')]){
          script {
            if ("${KEEP_TEST_ENV}" == "true") {
              echo "Skipping VM deletion"
            } else {
              timestamps {
                sh "./jenkins/scripts/integration_delete.sh"
              }
            }
          }
        }
      }
    }
  }
}