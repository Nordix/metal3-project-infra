import java.text.SimpleDateFormat

ci_git_credential_id = "metal3-jenkins-github-token"

// 10 minutes
def CLEAN_TIMEOUT = 600
// 3 hours
def TIMEOUT = 10800
// 5 hours
def NODE_REUSE_TIMEOUT = 18000

KEEP_TEST_ENV = (env.KEEP_TEST_ENV)

script {
  PROJECT_REPO_ORG = (env.REPO_OWNER) ?: (env.PROJECT_REPO_ORG)
  PROJECT_REPO_NAME = (env.REPO_NAME) ?: (env.PROJECT_REPO_NAME)
  UPDATED_REPO = "https://github.com/${PROJECT_REPO_ORG}/${PROJECT_REPO_NAME}.git"
  echo "Test triggered from ${UPDATED_REPO}"

  if ("${PROJECT_REPO_ORG}" == "metal3-io" && "${PROJECT_REPO_NAME}" == "project-infra") {
    ci_git_branch = (env.PULL_PULL_SHA) ?: (env.ghprbActualCommit) ?: "main"
    ci_git_base = (env.PULL_BASE_REF) ?: "main"
    // Fetch the base branch and the ci_git_branch when running on project-infra PR
    refspec = '+refs/heads/' + ci_git_base + ':refs/remotes/origin/' + ci_git_base + ' ' + ci_git_branch
    ci_git_url = (env.ghprbAuthorRepoGitUrl) ?: "https://github.com/metal3-io/project-infra.git"
  } else {
    ci_git_branch = "main"
    ci_git_url = "https://github.com/metal3-io/project-infra.git"
  }
  echo "Checkout ${ci_git_url} branch ${ci_git_branch}"

  def date = new Date()
  def dateFormat = new SimpleDateFormat("yyyyMMddHHmmss")
  def rand = new Random()
  VM_KEY = (1..4).collect {
    ('a'..
      'z').join("")[rand.nextInt(26)]
  }.join("")

  agent_label="metal3ci-large-${IMAGE_OS}"

  UPDATED_BRANCH = (env.PULL_PULL_SHA) ?: (env.ghprbActualCommit)
  REPO_BRANCH = (env.PULL_BASE_REF) ?: (env.ghprbTargetBranch)
  if (!env.REPO_OWNER) {
    UPDATED_REPO = "${ghprbAuthorRepoGitUrl}"
  }

}

pipeline {
  agent none
  environment {
    METAL3_CI_USER = "metal3ci"
    REPO_ORG = "${PROJECT_REPO_ORG}"
    REPO_NAME = "${PROJECT_REPO_NAME}"
    UPDATED_REPO = "${UPDATED_REPO}"
    REPO_BRANCH = "${REPO_BRANCH}"
    UPDATED_BRANCH = "${UPDATED_BRANCH}"
    BUILD_TAG = "${env.BUILD_TAG}"
    PR_ID = "${env.PULL_NUMBER}"
    IMAGE_OS = "${IMAGE_OS}"
    CAPI_VERSION = "${CAPI_VERSION}"
    CAPM3_VERSION = "${CAPM3_VERSION}"
    CAPM3RELEASEBRANCH = "${capm3_release_branch}"
    BMORELEASEBRANCH = "${bmo_release_branch}"
    TARGET_NODE_MEMORY = "${TARGET_NODE_MEMORY}"
    NUM_NODES = 4
    TESTS_FOR = "${TESTS_FOR}"
    KEEP_TEST_ENV = false
    GINKGO_FOCUS = "${GINKGO_FOCUS}"
  }

  stages {
    stage('e2e features test Stage') {
      failFast true
      parallel {
        stage('Run e2e pivoting based features') {
          agent { label agent_label }
          options{
            timeout(time: NODE_REUSE_TIMEOUT, unit: 'SECONDS')
          }
          environment {
              BUILD_TAG = "${env.BUILD_TAG}-pivoting-based"
              GINKGO_FOCUS = "pivoting"
          }
          steps {
            script {
                CURRENT_START_TIME = System.currentTimeMillis()
            }
            /* Checkout CI Repo */
            checkout([$class: 'GitSCM',
            branches: [
                [name: ci_git_branch]
            ],
            doGenerateSubmoduleConfigurations: false,
            extensions: [
                [$class: 'WipeWorkspace'],
                [$class: 'CleanCheckout'],
                [$class: 'CleanBeforeCheckout']
            ],
            submoduleCfg: [],
            userRemoteConfigs: [
                [credentialsId: ci_git_credential_id,
                url: ci_git_url,
                refspec: refspec
                ]
            ]
            ])

            withCredentials([string(credentialsId: 'metal3-clusterctl-github-token', variable: 'GITHUB_TOKEN')]) {
              ansiColor('xterm') {
                timestamps {
                  sh "./jenkins/scripts/dynamic_worker_workflow/feature_tests.sh"
                }  
              }
            }
          }
          post {
            always {
              script {
                CURRENT_END_TIME = System.currentTimeMillis()
                if ((((CURRENT_END_TIME - CURRENT_START_TIME) / 1000) - NODE_REUSE_TIMEOUT) > 0) {
                    echo "Failed due to timeout"
                    currentBuild.result = 'FAILURE'
                }
                timestamps {
                  sh "./jenkins/scripts/dynamic_worker_workflow/fetch_logs.sh"
                  archiveArtifacts "logs-${env.BUILD_TAG}.tgz"
                }
              }
            }
            cleanup {
              script {
                timestamps {
                  sh "./jenkins/scripts/dynamic_worker_workflow/run_clean.sh"
                }
              }
            }
          }
        }
        stage('Run e2e remediation based features') {
          agent { label agent_label }
          options {
            timeout(time: NODE_REUSE_TIMEOUT, unit: 'SECONDS')
          }
          environment {
            BUILD_TAG = "${env.BUILD_TAG}-remediation-based"
            GINKGO_FOCUS = "remediation"
          }
          steps {
            script {
                CURRENT_START_TIME = System.currentTimeMillis()
            }
            /* Checkout CI Repo */
            checkout([$class: 'GitSCM',
            branches: [
                [name: ci_git_branch]
            ],
            doGenerateSubmoduleConfigurations: false,
            extensions: [
                [$class: 'WipeWorkspace'],
                [$class: 'CleanCheckout'],
                [$class: 'CleanBeforeCheckout']
            ],
            submoduleCfg: [],
            userRemoteConfigs: [
                [credentialsId: ci_git_credential_id,
                url: ci_git_url
                ]
            ]
            ])
            
            withCredentials([string(credentialsId: 'metal3-clusterctl-github-token', variable: 'GITHUB_TOKEN')]) {
              ansiColor('xterm') {
                timestamps {
                  sh "./jenkins/scripts/dynamic_worker_workflow/feature_tests.sh"
                }
              }
            }
          }
          post {
            always {
              script {
                CURRENT_END_TIME = System.currentTimeMillis()
                if ((((CURRENT_END_TIME - CURRENT_START_TIME) / 1000) - NODE_REUSE_TIMEOUT) > 0) {
                    echo "Failed due to timeout"
                    currentBuild.result = 'FAILURE'
                }
                timestamps {
                  sh "./jenkins/scripts/dynamic_worker_workflow/fetch_logs.sh"
                  archiveArtifacts "logs-${env.BUILD_TAG}.tgz"
                }
              }
            }
            cleanup {
              script {
                timestamps {
                  sh "./jenkins/scripts/dynamic_worker_workflow/run_clean.sh"
                }
              }
            }
          }
        }

        stage('Run e2e features excluding pivoting-based and remediation tests') {
          agent { label agent_label }
          options {
            timeout(time: TIMEOUT, unit: 'SECONDS')
          }
          environment {
            BUILD_TAG = "${env.BUILD_TAG}-other-features"
            GINKGO_FOCUS = "features"
            GINKGO_SKIP = "pivoting remediation"
          }
          steps {
            script {
                CURRENT_START_TIME = System.currentTimeMillis()
            }
            /* Checkout CI Repo */
            checkout([$class: 'GitSCM',
            branches: [
                [name: ci_git_branch]
            ],
            doGenerateSubmoduleConfigurations: false,
            extensions: [
                [$class: 'WipeWorkspace'],
                [$class: 'CleanCheckout'],
                [$class: 'CleanBeforeCheckout']
            ],
            submoduleCfg: [],
            userRemoteConfigs: [
                [credentialsId: ci_git_credential_id,
                url: ci_git_url
                ]
            ]
            ])
            
            withCredentials([string(credentialsId: 'metal3-clusterctl-github-token', variable: 'GITHUB_TOKEN')]) {
              ansiColor('xterm') {
                timestamps {
                  sh "./jenkins/scripts/dynamic_worker_workflow/feature_tests.sh"
                }  
              }
            }
          }
          post {
            always {
              script {
                CURRENT_END_TIME = System.currentTimeMillis()
                if ((((CURRENT_END_TIME - CURRENT_START_TIME) / 1000) - TIMEOUT) > 0) {
                    echo "Failed due to timeout"
                    currentBuild.result = 'FAILURE'
                }
                timestamps {
                  sh "./jenkins/scripts/dynamic_worker_workflow/fetch_logs.sh"
                  archiveArtifacts "logs-${env.BUILD_TAG}.tgz"
                }
              }
            }
            cleanup {
              script {
                timestamps {
                  sh "./jenkins/scripts/dynamic_worker_workflow/run_clean.sh"
                }
              }
            }
          }
        }
      }   
    }
  }
}
