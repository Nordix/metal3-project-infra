import java.text.SimpleDateFormat

// 30 minutes
def TIMEOUT = 1800

script {
  def date = new Date()
  def dateFormat = new SimpleDateFormat("yyyyMMddHHmmss")
  def rand = new Random()
  VM_KEY = (1..4).collect { ('a'..'z').join("")[ rand.nextInt( 26 ) ] }.join("")
  VM_NAME = "ironic-image-build-tester-" + dateFormat.format(date) + "-" + VM_KEY
}

// The renaming of the GIT specific variables
// has to be intepreted in the context of what testing a PR means.
// Testing a PR means that the pipeline tests merging from a specific
// branch of a source repository to a specific branch of a destination repostiory.
pipeline {
  agent { label 'metal3-static-workers' }
  environment {
    // PR, source and destination branch information
    DESTINATION_REPO = "${PROJECT_REPO_ORG}/${PROJECT_REPO_NAME}"
    DESTINATION_BRANCH = "${ghprbTargetBranch ?: main}"
    SOURCE_REPO = "${ghprbAuthorRepoGitUrl ?: env.DESTINATION_REPO}"
    SOURCE_BRANCH = "${ghprbActualCommit ?: env.DESTINATION_BRANCH}"
    // Openstack VM parameters
    OS_AUTH_URL="https://kna1.citycloud.com:5000"
    OS_USER_DOMAIN_NAME="CCP_Domain_37137"
    OS_PROJECT_DOMAIN_NAME="${env.OS_USER_DOMAIN_NAME}"
    OS_REGION_NAME="Kna1"
    OS_PROJECT_NAME="Default Project 37137"
    OS_TENANT_NAME="${env.OS_PROJECT_NAME}"
    OS_AUTH_VERSION=3
    OS_IDENTITY_API_VERSION="${env.OS_AUTH_VERSION}"
    TEST_EXECUTER_VM_NAME = "${VM_NAME}"
    TEST_EXECUTOR_VM_KEY = "${VM_KEY}"
    // ironic-image build option(s)
    PATCHFILE_CONTENT="${params.PATCHFILE_CONTENT ?: 'openstack/ironic refs/heads/master:refs/remotes/origin/master' }"
    // Current directory
    CURRENT_DIR = sh (
                      script: 'readlink -f "."',
                      returnStdout: true
                     ).trim()
  }

  stages {
    stage('Build ironic container image'){
      options {
        timeout(time: TIMEOUT, unit: 'SECONDS')
      }
      steps {
        withCredentials([usernamePassword(credentialsId: 'metal3ci_city_cloud_openstack_credentials', usernameVariable: 'OS_USERNAME', passwordVariable: 'OS_PASSWORD'),
          sshUserPrivateKey(credentialsId: 'metal3ci_city_cloud_ssh_keypair', keyFileVariable: 'METAL3_CI_USER_KEY'),
          string(credentialsId: 'metal3-clusterctl-github-token', variable: 'GITHUB_TOKEN')]) {
            /* IPA Image building script */
            script {
              CURRENT_START_TIME = System.currentTimeMillis()
            }
            sh "./jenkins/scripts/start_ironic_image_build_test.sh"
         }
       }
    }
  }
  post{
    always {
       script {
         CURRENT_END_TIME = System.currentTimeMillis()
         if ((((CURRENT_END_TIME - CURRENT_START_TIME)/1000) - TIMEOUT) > 0) {
           echo "Failed due to timeout"
           currentBuild.result = 'FAILURE'
         }
       }
    }
    cleanup {
      withCredentials([usernamePassword(credentialsId: 'metal3ci_city_cloud_openstack_credentials', usernameVariable: 'OS_USERNAME', passwordVariable: 'OS_PASSWORD'),
        sshUserPrivateKey(credentialsId: 'metal3ci_city_cloud_ssh_keypair', keyFileVariable: 'METAL3_CI_USER_KEY')]){
          script {
              sh "./jenkins/scripts/ironic_image_build_test_delete.sh"
          }
        }
    }
  }
}
